
---
alwaysApply: true
---

# Pomodux Documentation Organization Rules

## Quick Reference Summary
- **Backlog folder**: One file per release (e.g., `release-0.3.1.md`), containing the working release and any planned/future releases. No completed releases.
- **Releases folder**: Contains all completed releases. Each release is a collection of features. No active planning or backlog duplication.
- **Move, don’t copy**: When a release is complete, move its planning file from backlog to releases.
- **No duplication**: Completed items must not exist in both backlog and releases.

---

## Overview
This file defines the rules for organizing documentation in the Pomodux project, specifically focusing on the `docs/` folder structure and the relationship between backlog and releases.

## Core Principles

### 1. Clear Separation of Concerns
- **Backlog**: Contains planning and requirements for current and future work
- **Releases**: Contains historical records of what was actually delivered
- **No Duplication**: Information should not be duplicated between backlog and releases

### 2. Backlog Folder Rules (`docs/backlog/`)

#### Structure
- **One file per feature**: Each feature gets its own file (e.g., `feature-name.md`)
- **Current releases only**: Backlog should contain only the current working release
- **No completed releases**: Completed releases must be moved to releases folder

#### Content
- User stories and requirements
- Acceptance criteria and TDD approach (optional)
- Technical planning and implementation details (optional)
- Feature breakdown and priorities (optional)
- Dependencies and relationships (optional)

#### Naming Convention
- `release-{major}.{minor}.{patch}.md` (e.g., `release-0.3.1.md`)
- `future-releases.md` for long-term planning

### 3. Releases Folder Rules (`docs/releases/`)

#### Structure
- **Final documents**: `release-X.Y.Z.md` (what was delivered)
- **One file per release**: Each release gets both final and backlog documents

#### Content
- **Final documents**: What was actually implemented, quality metrics, UAT results
- **No active planning**: Releases folder is for historical records only

#### Naming Convention
- `release-{major}.{minor}.{patch}-final.md` (e.g., `release-0.3.0-final.md`)

### 4. Release Lifecycle Rules

#### When a Release is Complete
1. **Move backlog file**: `docs/backlog/release-X.Y.Z.md` → `docs/releases/release-X.Y.Z-backlog.md`
2. **Create final document**: `docs/releases/release-X.Y.Z-final.md` (if not exists)
3. **Update documentation**: Update README files and cross-references
4. **Remove from backlog**: Ensure backlog only contains current/future work

#### When Starting a New Release
1. **Create new backlog file**: `docs/backlog/release-X.Y.Z.md`
2. **Update current release tracking**: Update `docs/current-release.md`
3. **Update documentation**: Update README files and cross-references

### 5. Documentation Standards

#### README Files
- **Backlog README**: Should list only current and planned releases
- **Releases README**: Should list all completed releases with status
- **Main README**: Should reflect current state and provide navigation

#### Cross-References
- Documents should link to related information
- Status indicators should be consistent (✅ COMPLETE, 🔄 IN PROGRESS, 📋 PLANNED)
- File paths should be accurate and up-to-date

### 6. Quality Assurance Rules

#### Before Committing Documentation Changes
- [ ] Verify no duplication between backlog and releases
- [ ] Ensure backlog contains only current/future work
- [ ] Confirm releases contain only completed work
- [ ] Update all README files and cross-references
- [ ] Check that status indicators are accurate

#### Documentation Review Checklist
- [ ] Clear separation between planning and historical records
- [ ] Consistent naming conventions
- [ ] Accurate cross-references
- [ ] Up-to-date status indicators
- [ ] No orphaned or duplicate files

### 7. File Organization Examples

#### Correct Structure
```
docs/
├── backlog/
│   ├── README.md
│   ├── enahnced-logging.md       # Example feature
│   └── release-0.3.1.md          # Current release 
├── releases/
│   ├── README.md
│   ├── release-0.1.0.md  # Completed release
│   ├── release-0.2.0.md  # Completed release 
│   └── ...
```

#### Incorrect Structure (Avoid)
```
docs/
├── backlog/
│   ├── release-0.3.0.md          # ❌ Completed release in backlog
│   └── release-0.3.1.md          # Current release
├── releases/
│   ├── release-0.3.0.md    # ✅ Correct
│   └── release-0.3.1-backlog.md  # ❌ Backlog 
│   └── release-0.3.1-final.md    # ❌ Current release in releases (has -final)
```

### 8. Enforcement Guidelines

#### For AI Assistants
- Always check current backlog structure before making changes
- Move completed releases from backlog to releases folder
- Update all documentation when release status changes
- Maintain clear separation between planning and historical records

### 9. Common Mistakes to Avoid

1. **Leaving completed releases in backlog**
2. **Duplicating information between backlog and releases**
3. **Inconsistent naming conventions**
4. **Outdated cross-references**
5. **Missing status updates in README files**

### 10. Maintenance Tasks

#### Regular Reviews
- Monthly: Review backlog for completed releases
- Quarterly: Audit documentation structure
- Per Release: Update all documentation when release completes

#### Cleanup Tasks
- Remove completed releases from backlog
- Update status indicators
- Fix broken cross-references
- Archive outdated documentation

---

**Note**: These rules ensure consistent documentation organization and prevent confusion between planning and historical records. Always follow these guidelines when working with the `docs/` folder structure. 
