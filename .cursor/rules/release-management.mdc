---
description: Implementing or building a release, Changing existing functionality, Fixing defects or bugs
globs: 
alwaysApply: false
---
# Development Process Rules for Pomodux

## Core Development Process Principles

### Process-Driven Development Philosophy

- **Always work within a structured process**: All work (releases, features, bug fixes) must follow the defined process
- **Approval gates are mandatory**: No work can proceed without passing through the required approval gates
- **TDD is non-negotiable**: All code changes must follow Test-Driven Development process
- **Documentation-driven progress**: All progress must be tracked and documented
- **Quality gates are required**: Every change must meet quality standards before proceeding

## Approval Gates Process

### Work Type Classification

**Determine the appropriate process based on work type**:

- **Releases**: Full 4-gate process (Plan → Develop → Test → Release)
- **Features**: 3-gate process (Plan → Develop → Test)
- **Bug Fixes**: 2-gate process (Plan → Fix)
- **Enhancements**: 2-gate process (Plan → Implement)
- **Technical Debt**: 2-gate process (Plan → Refactor)

### Gate 1: Work Plan Approval

**Before starting any development work**:

- [ ] **Work scope is defined**: Clear understanding of what needs to be done
- [ ] **Technical approach is planned**: Implementation strategy is documented
- [ ] **TDD approach is planned**: Test strategy is defined for the work
- [ ] **Success criteria are measurable**: Clear acceptance criteria defined
- [ ] **Timeline is realistic**: Development time accounts for TDD and testing

**Required Documentation**:
- Work plan in appropriate tracking document
- Technical specifications and approach
- TDD strategy for the work
- Timeline and milestone definitions

### Gate 2: Development Completion

**Before testing/validation**:

- [ ] **Work is implemented**: All planned work is functional
- [ ] **TDD process followed**: All code written following Red-Green-Refactor cycle
- [ ] **Test coverage meets requirements**: 80%+ overall, 95%+ critical paths
- [ ] **Code quality standards met**: Linting passes, documentation updated
- [ ] **Integration tests passing**: All components work together (if applicable)

**Required Deliverables**:
- Working implementation of the work
- Test results and coverage reports
- Updated documentation
- Code review completion

### Gate 3: Testing/Validation

**Before final approval**:

- [ ] **Testing completed**: Work tested according to type (unit, integration, user)
- [ ] **Issues addressed**: Any problems found are resolved
- [ ] **Acceptance criteria met**: Work meets defined success criteria
- [ ] **State persistence validated**: For releases with state, test across process restarts
- [ ] **Cross-platform compatibility**: Test on all supported platforms

**Required Activities**:
- Appropriate testing for work type (unit tests, integration tests, user testing)
- **User Acceptance Testing**: Comprehensive UAT scenarios covering real-world usage
- **State Persistence Testing**: Validate state survives process restarts (for applicable features)
- **Regression Testing**: Ensure no regression in existing functionality
- Bug fixes and improvements as needed
- Validation that work meets requirements

### Gate 4: Final Approval (Releases Only)

**Before public release** (applies only to releases):

- [ ] **Final testing completed**: All tests pass in release environment
- [ ] **Release notes prepared**: Complete release documentation with all sections
- [ ] **Installation procedures documented**: Clear installation instructions for all platforms
- [ ] **Release artifacts ready**: Binaries and packages prepared for all platforms
- [ ] **Documentation synchronized**: All project documentation updated and consistent

**Required Deliverables**:
- **Comprehensive Release Notes**: Include features, fixes, installation, configuration, known issues
- **Installation and Upgrade Procedures**: Clear instructions for all supported platforms
- **Release Artifacts**: Binaries and packages for all target platforms
- **Documentation Updates**: README, roadmap, backlog, and technical docs updated
- **GitHub Issues**: All issues closed and linked to release
- Final approval from stakeholders

## TDD Integration Requirements

### Test-Driven Development Process

**For every code change**:

1. **Write failing test first (Red)**:
   - Write a test that defines the desired behavior
   - Test should fail initially (Red phase)
   - Test should be specific and focused

2. **Write minimal code to pass (Green)**:
   - Write the minimal code needed to make the test pass
   - Don't add extra functionality yet
   - Focus on making the test green

3. **Refactor while keeping tests passing**:
   - Clean up the code while keeping tests passing
   - Improve design, readability, and performance
   - Ensure all tests still pass

### Test Coverage Requirements

- **Overall Coverage**: Minimum 80% for all code
- **Critical Paths**: Minimum 95% for core functionality
- **Public APIs**: 100% coverage for all public interfaces
- **Integration Tests**: Test component interactions and workflows

### Test Organization

- **Unit Tests**: Test individual functions and methods
- **Integration Tests**: Test component interactions
- **Performance Tests**: Benchmark critical paths
- **Test Helpers**: Use common test utilities and helpers

## Work Development Workflow

### Before Starting Development

1. **Check current work status**:
   - Review appropriate tracking document for current work
   - Ensure work is part of approved plan
   - Verify Gate 1 approval is complete

2. **Plan TDD approach**:
   - Define test cases for the work
   - Plan implementation approach
   - Estimate development time

3. **Update progress tracking**:
   - Update work status in appropriate tracking document
   - Set target completion dates
   - Document any dependencies

### During Development

1. **Follow TDD strictly**:
   - Write tests before implementation
   - Implement minimal code to pass tests
   - Refactor continuously

2. **Update documentation**:
   - Update technical documentation
   - Update user documentation (if applicable)
   - Update API documentation (if applicable)

3. **Track progress**:
   - Update work status regularly
   - Document any issues or blockers
   - Update test coverage metrics

### Before Gate Reviews

1. **Prepare gate deliverables**:
   - Complete all required deliverables for the gate
   - Prepare demonstration of work
   - Gather test results and metrics

2. **Update tracking documentation**:
   - Update appropriate tracking document with progress
   - Prepare gate review materials
   - Document any issues or concerns

3. **Request gate review**:
   - Schedule gate review meeting (if applicable)
   - Present deliverables to stakeholders
   - Address feedback and concerns

### Work Status Tracking

**For each work item, track**:

- **Status**: Not Started / In Progress / Complete / Blocked
- **Developer**: Assigned developer
- **TDD Progress**: Test completion status
- **Test Coverage**: Current coverage metrics
- **Notes**: Implementation notes and issues

## Quality Assurance Standards

### Code Quality Requirements

- **Linting**: All code must pass project linting rules
- **Formatting**: All code must follow project formatting standards
- **Documentation**: All public functions must be documented
- **Error Handling**: Proper error handling and validation

### Testing Requirements

- **Unit Tests**: Comprehensive unit test coverage
- **Integration Tests**: Test component interactions
- **Performance Tests**: Benchmark critical paths
- **User Acceptance Tests**: Validate user workflows
- **Regression Tests**: Ensure no regression in existing functionality
- **Cross-Platform Tests**: Validate functionality across supported platforms

### Documentation Requirements

- **Technical Documentation**: Keep architecture docs current
- **User Documentation**: Update user guides and examples
- **API Documentation**: Document all public APIs
- **Release Notes**: Prepare comprehensive release notes
- **GitHub Issues**: Update issue status and link to documentation
- **Backlog Updates**: Keep backlog synchronized with progress
- **Documentation Synchronization**: Update all docs simultaneously (roadmap, backlog, README, release notes)
- **Cross-Reference Consistency**: Ensure all documentation references are consistent and up-to-date

## Risk Management

### Risk Assessment

**For each work item, assess**:

- **Technical Risks**: Implementation challenges and solutions
- **Quality Risks**: Quality assurance risks and controls
- **User Acceptance Risks**: User experience risks and validation (if applicable)
- **Process Risks**: Workflow and approval gate risks
- **Dependency Risks**: External dependencies and integration risks

### Risk Mitigation

- **Early identification**: Identify risks early in release planning
- **Contingency planning**: Develop backup plans for high-risk items
- **Regular monitoring**: Monitor risks throughout development
- **Stakeholder communication**: Keep stakeholders informed of risks
- **Process adaptation**: Adjust process when risks materialize
- **Documentation updates**: Update process documentation based on lessons learned

## Work Type-Specific Guidelines

### Release Work (Major Versions)
- **Process**: Full 4-gate process
- **Tracking**: Use `docs/current-release.md`
- **Testing**: Comprehensive testing including user acceptance
- **Documentation**: Full release notes and documentation
- **Approval**: Stakeholder approval required at each gate

### Feature Work (New Functionality)
- **Process**: 3-gate process (Plan → Develop → Test)
- **Tracking**: Use appropriate feature tracking document
- **Testing**: Unit, integration, and feature testing
- **Documentation**: Technical and user documentation updates
- **Approval**: Technical lead approval for gates 1-2, user testing for gate 3

### Bug Fix Work (Defect Resolution)
- **Process**: 2-gate process (Plan → Fix)
- **Tracking**: Use bug tracking system or issue tracker
- **Testing**: Unit tests and regression testing
- **Documentation**: Update relevant documentation
- **Approval**: Self-review for gate 1, peer review for gate 2

### Enhancement Work (Minor Improvements)
- **Process**: 2-gate process (Plan → Implement)
- **Tracking**: Use appropriate tracking document
- **Testing**: Unit tests and basic integration testing
- **Documentation**: Update relevant documentation
- **Approval**: Self-review for gate 1, peer review for gate 2

### Technical Debt Work (Refactoring)
- **Process**: 2-gate process (Plan → Refactor)
- **Tracking**: Use technical debt tracking document
- **Testing**: Ensure no regression, maintain test coverage
- **Documentation**: Update technical documentation
- **Approval**: Self-review for gate 1, peer review for gate 2

## GitHub Issues Integration

### Issue Management Workflow

**For all work types**:

- **Issue Creation**: Use appropriate GitHub issue templates
- **Issue Linking**: Link issues to backlog items and documentation
- **Progress Tracking**: Update issue status throughout development
- **Issue Closure**: Close issues with appropriate resolution and documentation

### Issue Templates Usage

- **Feature Request**: For new features and enhancements
- **Bug Report**: For defects and issues
- **Release Task**: For release-specific implementation tasks
- **UAT Testing**: For user acceptance testing

### Issue Status Tracking

- **needs-triage**: New issues awaiting review
- **in-progress**: Currently being worked on
- **ready-for-review**: Ready for code review
- **ready-for-uat**: Ready for user testing
- **blocked**: Blocked by other issues
- **closed**: Completed and resolved

## Release Transition Process

### Release Completion

**When a release is completed**:

1. **Update Documentation**:
   - Mark release as complete in roadmap
   - Update backlog with completion status
   - Update README with current status
   - Archive release documentation

2. **GitHub Issues Management**:
   - Close all issues for completed release
   - Update issue status and resolution
   - Link issues to release notes
   - Archive completed milestone

3. **Process Review and Evolution**:
   - Conduct release retrospective
   - Document lessons learned and process improvements
   - Update process documentation based on experience
   - Identify areas for process enhancement
   - Update this release management document with new insights

### Release Planning Transition

**When starting a new release**:

1. **Planning Phase**:
   - Validate if a release planning document exists, if not create a release planning document
   - Review and update backlog
   - Set release objectives and scope
   - Define success criteria

2. **Gate 1 Preparation**:
   - Prepare technical specifications
   - Plan TDD approach for features
   - Estimate timeline and resources
   - Identify risks and mitigation strategies

3. **Documentation Updates**:
   - Update current release tracker
   - Create GitHub milestone
   - Update roadmap status
   - Prepare issue templates

### Cross-Release Dependencies

**Managing dependencies between releases**:

- **Feature Dependencies**: Track features that depend on previous releases
- **Technical Dependencies**: Identify technical debt and refactoring needs
- **Documentation Dependencies**: Ensure documentation consistency across releases
- **Testing Dependencies**: Maintain test coverage and regression testing

## Continuous Process Improvement

### Process Evolution Framework

**The development process should continuously evolve based on experience**:

#### After Each Release
1. **Conduct Retrospective**: Review what worked well and what didn't
2. **Document Lessons**: Capture specific lessons learned
3. **Update Process**: Modify this document with new insights
4. **Implement Changes**: Apply process improvements to next release

#### Process Improvement Areas
- **Gate Requirements**: Refine gate criteria based on experience
- **Documentation Standards**: Improve documentation requirements
- **Testing Strategies**: Enhance testing approaches
- **Quality Metrics**: Adjust quality standards and measurements
- **Workflow Efficiency**: Streamline development workflows

#### Lessons Integration
- **Immediate Application**: Apply lessons to current development
- **Process Updates**: Update this document with new requirements
- **Team Training**: Share lessons with development team
- **Best Practices**: Establish new best practices based on experience

## References

### Project Documentation
- **[Release Management Guide](mdc:docs/release-management.md)** - Comprehensive release management framework and documentation standards
- **[Current Release Tracker](mdc:docs/current-release.md)** - Current release progress and status
- **[Implementation Roadmap](mdc:docs/implementation-roadmap.md)** - Technical implementation plan by release
- **[Backlog](mdc:docs/backlog.md)** - Feature backlog organized by release
- **[Release Notes](mdc:RELEASE_NOTES.md)** - Complete release history and documentation
- **[Release Documentation](mdc:docs/releases/README.md)** - Release documentation standards and structure

### Process Evolution and Lessons Learned

**The development process evolves based on experience and lessons learned from each release**:

#### Documentation Synchronization
- **Lesson**: Keep all documentation updated simultaneously during development
- **Process Update**: Added documentation requirements to all gate deliverables
- **Implementation**: Update roadmap, backlog, README, and release notes together

#### Test Isolation and Quality
- **Lesson**: Ensure tests don't interfere with each other, especially with state persistence
- **Process Update**: Enhanced testing requirements with regression and cross-platform testing
- **Implementation**: Use isolated test environments and cleanup procedures

#### State Persistence Validation
- **Lesson**: Validate state persistence across process restarts thoroughly
- **Process Update**: Added state persistence testing to Gate 3 requirements
- **Implementation**: Include process restart scenarios in UAT testing

#### User Acceptance Testing
- **Lesson**: Include comprehensive UAT scenarios covering real-world usage
- **Process Update**: Enhanced Gate 3 with detailed UAT requirements
- **Implementation**: Use structured UAT templates and acceptance criteria

#### Release Documentation Completeness
- **Lesson**: Prepare complete release notes and installation instructions
- **Process Update**: Enhanced Gate 4 requirements for release documentation
- **Implementation**: Use release templates and comprehensive documentation checklists

#### Documentation Organization
- **Lesson**: Maintain single authoritative release documents to avoid confusion
- **Process Update**: Establish clear document hierarchy and supersession rules
- **Implementation**: Archive or delete outdated documents, maintain clear document status
- **Reference**: See [Release Management - Section 3.0](mdc:docs/release-management.md#30-release-documentation-standards) for complete standards

### External Resources
- [Test-Driven Development by Example](mdc:https:/www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530)
- [Continuous Delivery](mdc:https:/www.amazon.com/Continuous-Delivery-Deployment-Automation-Addison-Wesley/dp/0321601912)
- [Agile Release Planning](mdc:https:/www.scrum.org/resources/blog/agile-release-planning)
