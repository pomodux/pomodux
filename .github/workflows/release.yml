name: Release

on:
  push:
    tags:
      - 'v*' # Triggers on version tags like v1.0.0, v2.1.3, etc.

env:
  GO_VERSION: '1.24.4'
  CGO_ENABLED: 0

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

    - name: Build for multiple platforms
      run: |
        # Create release directory
        mkdir -p release
        
        # Build for Linux (amd64)
        GOOS=linux GOARCH=amd64 go build \
          -ldflags="-s -w -X main.Version=${{ steps.version.outputs.version }}" \
          -o release/pomodux-linux-amd64 \
          cmd/pomodux/main.go
        
        # Build for Linux (arm64)
        GOOS=linux GOARCH=arm64 go build \
          -ldflags="-s -w -X main.Version=${{ steps.version.outputs.version }}" \
          -o release/pomodux-linux-arm64 \
          cmd/pomodux/main.go
        
        # Build for macOS (amd64)
        GOOS=darwin GOARCH=amd64 go build \
          -ldflags="-s -w -X main.Version=${{ steps.version.outputs.version }}" \
          -o release/pomodux-darwin-amd64 \
          cmd/pomodux/main.go
        
        # Build for macOS (arm64)
        GOOS=darwin GOARCH=arm64 go build \
          -ldflags="-s -w -X main.Version=${{ steps.version.outputs.version }}" \
          -o release/pomodux-darwin-arm64 \
          cmd/pomodux/main.go
        
        # Build for Windows (amd64)
        GOOS=windows GOARCH=amd64 go build \
          -ldflags="-s -w -X main.Version=${{ steps.version.outputs.version }}" \
          -o release/pomodux-windows-amd64.exe \
          cmd/pomodux/main.go
        
        # Build for Windows (arm64)
        GOOS=windows GOARCH=arm64 go build \
          -ldflags="-s -w -X main.Version=${{ steps.version.outputs.version }}" \
          -o release/pomodux-windows-arm64.exe \
          cmd/pomodux/main.go

    - name: Create checksums
      run: |
        cd release
        sha256sum pomodux-* > pomodux-${{ steps.version.outputs.version }}-checksums.txt

    - name: Create release archives
      run: |
        cd release
        
        # Create tar.gz archives for Linux and macOS
        tar -czf pomodux-linux-amd64-${{ steps.version.outputs.version }}.tar.gz pomodux-linux-amd64
        tar -czf pomodux-linux-arm64-${{ steps.version.outputs.version }}.tar.gz pomodux-linux-arm64
        tar -czf pomodux-darwin-amd64-${{ steps.version.outputs.version }}.tar.gz pomodux-darwin-amd64
        tar -czf pomodux-darwin-arm64-${{ steps.version.outputs.version }}.tar.gz pomodux-darwin-arm64
        
        # Create zip archives for Windows
        zip pomodux-windows-amd64-${{ steps.version.outputs.version }}.zip pomodux-windows-amd64.exe
        zip pomodux-windows-arm64-${{ steps.version.outputs.version }}.zip pomodux-windows-arm64.exe

    - name: Generate release notes
      id: release_notes
      run: |
        # Generate release notes from git log since last tag
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD > release_notes.txt
        
        # If no release notes found, create a default one
        if [ ! -s release_notes.txt ]; then
          echo "## What's Changed" > release_notes.txt
          echo "" >> release_notes.txt
          echo "### Features" >> release_notes.txt
          echo "- Release ${{ steps.version.outputs.version }}" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "### Bug Fixes" >> release_notes.txt
          echo "- Various improvements and bug fixes" >> release_notes.txt
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Pomodux ${{ steps.version.outputs.version }}
        body_path: release_notes.txt
        files: |
          release/pomodux-*-${{ steps.version.outputs.version }}.tar.gz
          release/pomodux-*-${{ steps.version.outputs.version }}.zip
          release/pomodux-${{ steps.version.outputs.version }}-checksums.txt
        draft: false
        prerelease: false

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-${{ steps.version.outputs.version }}
        path: release/
        retention-days: 90

    - name: Run UAT tests on release build
      run: |
        # Install bats-core
        git clone https://github.com/bats-core/bats-core.git /tmp/bats
        sudo /tmp/bats/install.sh /usr/local
        
        # Create bin directory and copy Linux build for testing
        mkdir -p bin
        cp release/pomodux-linux-amd64 bin/pomodux
        chmod +x bin/pomodux
        
        # Run UAT tests
        chmod +x tests/uat/automated/run-tests.sh
        ./tests/uat/automated/run-tests.sh

    - name: Upload UAT test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: uat-test-results-${{ steps.version.outputs.version }}
        path: tests/reports/
        retention-days: 30 